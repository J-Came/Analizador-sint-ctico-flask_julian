
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASIGNACION CHAR COMILLAS_DOBLES CORCHETE_ABIERTO CORCHETE_CERRADO DISTINTO DIVISION DOUBLE ENTERO FLOAT FLOTANTE FOR IDENTIFICADOR IF IGUAL INT LLAVE_ABIERTO LLAVE_CERRADO MAIN MAYOR_IGUAL MAYOR_QUE MENOR_IGUAL MENOR_QUE MODULO MULTIPLICACION NO_LOGICO NUMERO O_LOGICO PARENTESIS_ABIERTO PARENTESIS_CERRADO PAR_ABIERTO PAR_CERRADO POTENCIA PUNTO_Y_COMA RESTA RETURN SUMA UMINUS VOID WHILE Y_LOGICOprograma : expresionesexpresiones : expresion\n                   | expresion expresionesexpresion : identificador ASIGNACION expresion\n                 | expresion SUMA expresion\n                 | expresion RESTA expresion\n                 | expresion MULTIPLICACION expresion\n                 | expresion DIVISION expresion\n                 | PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO\n                 | identificador\n                 | NUMEROidentificador : IDENTIFICADOR'
    
_lr_action_items = {'PARENTESIS_ABIERTO':([0,3,4,5,6,7,9,10,11,12,13,15,16,17,18,19,20,],[5,5,-10,5,-11,-12,5,5,5,5,5,-5,-6,-7,-8,-4,-9,]),'NUMERO':([0,3,4,5,6,7,9,10,11,12,13,15,16,17,18,19,20,],[6,6,-10,6,-11,-12,6,6,6,6,6,-5,-6,-7,-8,-4,-9,]),'IDENTIFICADOR':([0,3,4,5,6,7,9,10,11,12,13,15,16,17,18,19,20,],[7,7,-10,7,-11,-12,7,7,7,7,7,-5,-6,-7,-8,-4,-9,]),'$end':([1,2,3,4,6,7,8,15,16,17,18,19,20,],[0,-1,-2,-10,-11,-12,-3,-5,-6,-7,-8,-4,-9,]),'SUMA':([3,4,6,7,14,15,16,17,18,19,20,],[9,-10,-11,-12,9,9,9,9,9,9,-9,]),'RESTA':([3,4,6,7,14,15,16,17,18,19,20,],[10,-10,-11,-12,10,10,10,10,10,10,-9,]),'MULTIPLICACION':([3,4,6,7,14,15,16,17,18,19,20,],[11,-10,-11,-12,11,11,11,11,11,11,-9,]),'DIVISION':([3,4,6,7,14,15,16,17,18,19,20,],[12,-10,-11,-12,12,12,12,12,12,12,-9,]),'ASIGNACION':([4,7,],[13,-12,]),'PARENTESIS_CERRADO':([4,6,7,14,15,16,17,18,19,20,],[-10,-11,-12,20,-5,-6,-7,-8,-4,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'expresiones':([0,3,],[2,8,]),'expresion':([0,3,5,9,10,11,12,13,],[3,3,14,15,16,17,18,19,]),'identificador':([0,3,5,9,10,11,12,13,],[4,4,4,4,4,4,4,4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> expresiones','programa',1,'p_programa','parser.py',6),
  ('expresiones -> expresion','expresiones',1,'p_expresiones','parser.py',10),
  ('expresiones -> expresion expresiones','expresiones',2,'p_expresiones','parser.py',11),
  ('expresion -> identificador ASIGNACION expresion','expresion',3,'p_expresion','parser.py',15),
  ('expresion -> expresion SUMA expresion','expresion',3,'p_expresion','parser.py',16),
  ('expresion -> expresion RESTA expresion','expresion',3,'p_expresion','parser.py',17),
  ('expresion -> expresion MULTIPLICACION expresion','expresion',3,'p_expresion','parser.py',18),
  ('expresion -> expresion DIVISION expresion','expresion',3,'p_expresion','parser.py',19),
  ('expresion -> PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO','expresion',3,'p_expresion','parser.py',20),
  ('expresion -> identificador','expresion',1,'p_expresion','parser.py',21),
  ('expresion -> NUMERO','expresion',1,'p_expresion','parser.py',22),
  ('identificador -> IDENTIFICADOR','identificador',1,'p_identificador','parser.py',29),
]
